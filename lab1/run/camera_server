#!/usr/bin/env bash

path_to_file=""
file_name=".envrc"
folder_to_look_in="$PWD"
while :
do
    # check if file exists
    if [ -f "$folder_to_look_in/$file_name" ]
    then
        path_to_file="$folder_to_look_in/$file_name"
        break
    else
        if [ "$folder_to_look_in" = "/" ]
        then
            break
        else
            folder_to_look_in="$(dirname "$folder_to_look_in")"
        fi
    fi
done
if [ -z "$path_to_file" ]
then
    #
    # what to do if file never found
    #
    echo "I couldn't find your .envrc file"
    echo "please run the command from the folder with the .envrc"
else

    # go to the path
    cd "$(dirname "$path_to_file")"
    # source it
    . ./.envrc

    # 
    # setup servers
    # 
    server_folder="$catkin_dir/src/sb_master/sb_web"

    if ! [ -d "$server_folder" ]
    then
        echo "make sure you run"
        echo "I looked for a folder here:"
        echo "    $server_folder"
        echo "but I couldn't find one"
    else
        # 
        # setup node server
        # 
            builtin cd "$server_folder"
            npm install
            
            host_ip_address="127.0.0.1"
            
            http-server -S -C cert.pem -o -K key.pem
            
            # if ansifilter doesnt exist
            if [ -z "$(command -v "ansifilter")" ]
            then
                echo
                # nix-env -iA nixpkgs.ansifilter -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/aa0e8072a57e879073cee969a780e586dbe57997.tar.gz
            fi
            # if deno doesnt exist
            if [ -z "$(command -v "deno")" ]
            then
                curl -fsSL https://deno.land/x/install/install.sh | sh
                # nix-env -iA nixpkgs.deno -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/aa0e8072a57e879073cee969a780e586dbe57997.tar.gz
                export PATH="/home/jeffhykin/.deno/bin:$PATH"
            fi
            
            # if denoliver doesnt exist
            if [ -z "$(command -v "denoliver")" ]
            then
                deno install --allow-net --allow-read --allow-write --allow-run https://deno.land/x/denoliver/mod.ts
                export PATH="/home/jeffhykin/.deno/bin:$PATH"
            fi
            
            
            port_number=8083
            {
                denoliver -t -p "$port_number" --certFile cert.pem --keyFile key.pem . | tee simple_server_output.txt | grep -v "Local:" ||
                echo "first deno failed" &&
                denoliver -t -p "$port_number" --certFile cert.pem --keyFile key.pem . | tee simple_server_output.txt | grep -v "Local:" ||
                denoliver -t -p "$port_number" --certFile cert.pem --keyFile key.pem . | tee simple_server_output.txt | grep -v "Local:" ||
                denoliver -t -p "$port_number" --certFile cert.pem --keyFile key.pem . | tee simple_server_output.txt | grep -v "Local:" ||
                echo "Simple server failed too many times, please restart"
            } &
            host_ip_address="$(cat simple_server_output.txt | grep 'Network:' | sd 'Network:.*?https?://(.+)?:'"$port_number" '${1}')"
            echo 'host_ip_address: '"$host_ip_address"


        # 
        # patch rb_server.launch (inject correct cert.pem and key.pem paths, and default host address)
        # 
            # if sd doesnt exist (sd is a better version of sed)
            if [ -z "$(command -v "sd")" ]
            then
                nix-env -iA nixpkgs.sd -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/aa0e8072a57e879073cee969a780e586dbe57997.tar.gz
            fi
            
            # if sd still doesnt exist (sd is a better version of sed)
            if [ -z "$(command -v "sd")" ]
            then
                curl https://sh.rustup.rs -sSf | sh
                source "$HOME/.cargo/env"
                # if cargo exists
                if [ -n "$(command -v "cargo")" ]
                then
                    cargo install sd
                fi
            fi
            
            # if sd exists
            if [ -n "$(command -v "sd")" ]
            then
                sd 'address" default=".*?"' 'address" default="'"$host_ip_address"'"' rb_server.launch
                sd 'value=".*sb_master/sb_web/cert\.pem' "value=\"$PWD/cert.pem" rb_server.launch
                sd 'value=".*sb_master/sb_web/key\.pem' "value=\"$PWD/key.pem" rb_server.launch
                sd 'default=".*sb_master/sb_web/cert\.pem' "default=\"$PWD/cert.pem" rb_server.launch
                sd 'default=".*sb_master/sb_web/key\.pem' "default=\"$PWD/key.pem" rb_server.launch
            fi
    fi

fi

